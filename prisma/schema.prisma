generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              String          @id @default(cuid())
  name            String          @unique
  description     String?
  websiteUrl      String?
  logoUrl         String?
  verifiedDomains String[]        @default([])
  jobs            Job[]
   questions CompanyQuestion[]
  members         CompanyMember[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model CompanyMember {
  userId    String
  companyId String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role      CompanyRole @default(MEMBER)

  @@id([userId, companyId])
}

model Job {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  title     String
  location  String
  type      JobType
  minSalary    Int?          
  maxSalary    Int?          
  currency     String        @default("PHP") 
  payPeriod    SalaryPeriod? 
  jobClass  JobClass
  status JobStatus @default(ACTIVE)

  summary          String           @default("no summary provided")
  qualifications   String           @default("no qualifications provided")
  responsibilities String           @default("no responsibilities provided")
  benefits         String?
 questions QuestionsOnJobs[]
  tags             String[]         @default([])
  JobApplication   JobApplication[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model JobApplication {
  id     String @id @default(cuid())
  userId String
  jobId  String
  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id])
  Job    Job    @relation(fields: [jobId], references: [id])
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]
   status    ApplicationStatus @default(NEW) 
    notes     String?
     isArchived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  role          UserRole  @default(JOB_SEEKER)

  companies     CompanyMember[]

  resumes             Resume[]
  JobApplication      JobApplication[]
  summary             String?
  previousCareers     CareerHistory[]
  education           Education[]
  skills              Skill[]
  languages           Language[]
  availability        UserAvailabilityType?
  preferredWorkTypes  JobType[]             @default([]) 
  preferredLocation   String[]
  rightToWork         String[]
  expectedSalary      String?
  jobClassification   JobClass[]

    approachability     UserApproachability?  @default(OPEN)
  
  
  accounts            Account[]
  sessions            Session[]
}

model CareerHistory {
  id          String    @id @default(cuid())
  title       String
  company     String
  dateStarted DateTime
  dateEnded   DateTime?
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Education {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  course              String
  institution         String
  highlight           String?
  isComplete          Boolean
  finishedYear        Int?
  expectedFinishMonth Int?
  expectedFinishYear  Int?
  deletedAt           DateTime?

  @@unique([id, userId])
}

model LicenceAndCertificate {
  id          String    @id @default(cuid())
  name        String
  organization String?
  dateIssed   DateTime?
  expiryDate  DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String
  users User[]
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @unique
  users User[]
}

model Resume {
  id              String           @id @default(uuid())
  title           String
  url             String
  isPrimary       Boolean
  userId          String
  User            User             @relation(fields: [userId], references: [id])
  JobApplications JobApplication[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?

  @@unique([userId, title])
}


model Answer {
  id               String         @id @default(cuid())
  text             String
  jobApplicationId String
  JobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  
  // Update this relationship
  questionId       String
  Question         CompanyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([jobApplicationId, questionId])
}





model CompanyQuestion {
  id         String       @id @default(cuid())
  text       String
  type       QuestionType
  options    String[]

  companyId  String
  company    Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  jobs       QuestionsOnJobs[]
  answers    Answer[]
  
  isArchived Boolean      @default(false) 
}


model QuestionsOnJobs {
  jobId           String
  questionId      String
  job             Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  question        CompanyQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  isRequired      Boolean          @default(true)
  sortOrder       Int?

  @@id([jobId, questionId])
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum JobClass {
  ACCOUNTING
  ADMINISTRATION
  CONSTRUCTION
  EDUCATION
  ENGINEERING
  FINANCE
  HEALTHCARE
  HOSPITALITY
  HUMAN_RESOURCES
  IT
  LEGAL
  LOGISTICS
  MANUFACTURING
  MARKETING
  MEDIA
  OPERATIONS
  SALES
  SCIENCE
  SUPPORT
  TELECOMMUNICATIONS
  TRANSPORTATION
  OTHER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum QuestionType {
  TEXT
  YES_NO
  MULTIPLE_CHOICE
  NUMBER
}

enum UserAvailabilityType {
  NOW
  TWOWEEKS
  FOURWEEKS
  EIGHTWEEKS
  TWELVEPLUSWEEKS
}

enum CompanyRole {
  ADMIN
  MEMBER
}

enum UserRole {
  EMPLOYER
  JOB_SEEKER
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
}

enum ApplicationStatus {
  NEW
  IN_REVIEW
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}

enum SalaryPeriod {
  HOURLY
  MONTHLY
  ANNUAL
}

enum UserApproachability {
  OPEN      // Open to all opportunities
  RECRUITERS_ONLY // Only wants to be contacted by recruiters
  CLOSED    // Not looking for opportunities right now
}