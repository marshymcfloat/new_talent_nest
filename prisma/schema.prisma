
generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id        String   @id @default(cuid())
  company   String
  title     String
  location  String
  type      JobType
  salary    String
  jobClass  JobClass

  summary         String   @default("no summary provided")
  qualifications  String   @default("no qualifications provided")
  responsibilities String  @default("no responsibilities provided")
  benefits        String?  
  
  employerQuestions EmployerQuestion[] 
  tags              String[] @default([]) 
  JobApplication JobApplication[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model JobApplication {
  id     String @id @default(cuid())
  userId String 
  jobId  String

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id])

  Job    Job    @relation(fields: [jobId], references: [id])
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade) 

  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


model User {
  id            String    @id @default(cuid())
  name          String?   
  email         String?   @unique
  emailVerified DateTime?
  image         String?   

  username      String?   @unique 
  password      String?   

  resumes Resume[]
  JobApplication JobApplication[]

  summary String?
  previousCareers CareerHistory[]
  education Education[]
  skills Skill[]
  languages Language[]
  availability UserAvailabilityType?
  preferredWorkType JobType?
  preferredLocation String[]
  rightToWork String[]
  expectedSalary String?
  jobClassification JobClass[]


  accounts      Account[]
  sessions      Session[]

}

model CareerHistory {

  id String @id @default(cuid())

  title String
  company String
  dateStarted DateTime
  dateEnded DateTime?
  description String?

  userId String 
  user User @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Education {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id])

  course String
  institution String
  dateStarted DateTime
  dateEnded DateTime
  highlight String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LicenceAndCertificate {

  id String @id @default(cuid())

  name String
  organization  String?
  dateIssed DateTime? 
  expiryDate DateTime?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id Int @id @default(autoincrement())

  name String

  users User[]


}

model Language{
  id Int @id @default(autoincrement())
  name String

  users User[]
}


model Resume {
  id String @id @default(uuid())
  title String @unique
  url String
  isPrimary Boolean

  userId String
  User User @relation(fields: [userId], references: [id])

  JobApplications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model EmployerQuestion {
  id        String   @id @default(cuid())
  text      String  
  type      QuestionType 
  isRequired Boolean  @default(true)
  options   String[] // For multiple-choice questions

  jobId String
  Job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  answers Answer[]
}


model Answer {
  id   String @id @default(cuid())
  text String 

  jobApplicationId String
  JobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)

  questionId String
  Question   EmployerQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([jobApplicationId, questionId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



enum JobClass {
  ACCOUNTING
  CONSTRUCTION
  SALES
  SUPPORT
  IT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum QuestionType {
  TEXT
  YES_NO
  MULTIPLE_CHOICE
  NUMBER
}

enum UserAvailabilityType {
  NOW
  TWOWEEKS
  FOURWEEKS
  EIGHTWEEKS
  TWELVEPLUSWEEKS
}